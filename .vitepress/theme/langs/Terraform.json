{
  "fileTypes": [
    "tf",
    "tfvars",
    "hcl"
  ],
  "name": "Terraform",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#top_level_attribute_definition"
    },
    {
      "include": "#imports"
    },
    {
      "include": "#block"
    },
    {
      "include": "#expressions"
    }
  ],
  "repository": {
    "attribute_access": {
      "begin": "\\.",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.accessor.terraform"
        }
      },
      "comment": "Attribute Access - \".\" Identifier",
      "end": "(\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b)|(\\*)|(\\d+)",
      "endCaptures": {
        "1": {
          "name": "variable.other.member.terraform"
        },
        "2": {
          "name": "keyword.operator.splat.terraform"
        },
        "3": {
          "name": "constant.numeric.integer.terraform"
        }
      }
    },
    "block": {
      "begin": "(\\b(resource|provider|variable|output|locals|module|data|terraform)\\b|(\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b))(?=[\\s\\\"\\-[:word:]]*(\\{))",
      "beginCaptures": {
        "2": {
          "name": "storage.type.terraform"
        },
        "3": {
          "name": "entity.name.type.terraform"
        }
      },
      "comment": "Blocks",
      "end": "(?=\\{)",
      "name": "meta.type.terraform",
      "patterns": [
        {
          "begin": "\\\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.terraform"
            }
          },
          "comment": "String literal label",
          "end": "\\\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.terraform"
            }
          },
          "name": "string.quoted.double.terraform"
        },
        {
          "comment": "Identifer label",
          "match": "\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b",
          "name": "entity.name.label.terraform"
        }
      ]
    },
    "block_comments": {
      "begin": "/\\*",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.terraform"
        }
      },
      "comment": "Block comments",
      "end": "\\*/",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.comment.terraform"
        }
      },
      "name": "comment.block.terraform"
    },
    "brackets": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.brackets.begin.terraform"
        }
      },
      "comment": "Tuples & subscript notation",
      "end": "(\\*)?\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.brackets.end.terraform"
        },
        "1": {
          "name": "keyword.operator.splat.terraform"
        }
      },
      "patterns": [
        {
          "include": "#comma"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        },
        {
          "include": "#tuple_for_expression"
        }
      ]
    },
    "comma": {
      "comment": "Commas - used in certain expressions",
      "match": "\\,",
      "name": "punctuation.separator.terraform"
    },
    "comments": {
      "patterns": [
        {
          "include": "#inline_comments"
        },
        {
          "include": "#block_comments"
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "include": "#literal_values"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#brackets"
        },
        {
          "include": "#objects"
        },
        {
          "include": "#attribute_access"
        },
        {
          "include": "#functions"
        },
        {
          "include": "#parens"
        }
      ]
    },
    "functions": {
      "begin": "((abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)|\\b((?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b))(\\()",
      "beginCaptures": {
        "2": {
          "name": "support.function.builtin.terraform"
        },
        "3": {
          "name": "variable.function.terraform"
        },
        "4": {
          "name": "punctuation.section.parens.begin.terraform"
        }
      },
      "comment": "Functions calls- Terraform builtins and unknown",
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.terraform"
        }
      },
      "name": "meta.function-call.terraform",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        },
        {
          "include": "#comma"
        }
      ]
    },
    "heredoc": {
      "begin": "(\\<\\<\\-?)\\s*(\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b)\\s*$",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.heredoc.terraform"
        },
        "2": {
          "name": "keyword.control.heredoc.terraform"
        }
      },
      "comment": "Heredocs",
      "end": "^\\s*\\2\\s*$",
      "endCaptures": {
        "0": {
          "name": "keyword.control.heredoc.terraform"
        }
      },
      "name": "string.unquoted.heredoc.terraform",
      "patterns": [
        {
          "include": "#string_interpolation"
        }
      ]
    },
    "imports": {
      "begin": "\\s*(terraform)\\s*(import)\\s*",
      "beginCaptures": {
        "1": {
          "name": "support.constant.terraform"
        },
        "2": {
          "name": "keyword.control.import.terraform"
        }
      },
      "comment": "Terraform imports",
      "end": "$\\n?",
      "patterns": [
        {
          "include": "#string_literals"
        },
        {
          "comment": "Identifier label",
          "match": "\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b",
          "name": "entity.name.label.terraform"
        },
        {
          "include": "#numeric_literals"
        },
        {
          "include": "#attribute_access"
        }
      ]
    },
    "inline_comments": {
      "begin": "#|//",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.terraform"
        }
      },
      "comment": "Inline comments",
      "end": "$\n?",
      "name": "comment.line.terraform"
    },
    "language_constants": {
      "comment": "Language Constants",
      "match": "\\b(true|false|null)\\b",
      "name": "constant.language.terraform"
    },
    "literal_values": {
      "patterns": [
        {
          "include": "#numeric_literals"
        },
        {
          "include": "#language_constants"
        },
        {
          "include": "#string_literals"
        },
        {
          "include": "#heredoc"
        },
        {
          "include": "#type_keywords"
        },
        {
          "include": "#named_value_references"
        }
      ]
    },
    "main": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#block"
        },
        {
          "include": "#expressions"
        }
      ]
    },
    "named_value_references": {
      "comment": "Terraform built-in variables",
      "match": "\\b(var|local|module|data|path|terraform)\\b",
      "name": "support.constant.terraform"
    },
    "numeric_literals": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.separator.exponent.terraform"
            }
          },
          "comment": "Integer, no fraction, optional exponent",
          "match": "\\b\\d+(([Ee][+-]?))\\d+\\b",
          "name": "constant.numeric.float.terraform"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.separator.decimal.terraform"
            },
            "2": {
              "name": "punctuation.separator.exponent.terraform"
            }
          },
          "comment": "Integer, fraction, optional exponent",
          "match": "\\b\\d+(\\.)\\d+(?:(([Ee][+-]?))\\d+)?\\b",
          "name": "constant.numeric.float.terraform"
        },
        {
          "comment": "Integers",
          "match": "\\b\\d+\\b",
          "name": "constant.numeric.integer.terraform"
        }
      ]
    },
    "object_for_expression": {
      "begin": "\\bfor\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.terraform"
        }
      },
      "comment": "Object for-expression",
      "end": "(?=\\})",
      "patterns": [
        {
          "match": "\\=\\>",
          "name": "storage.type.function.terraform"
        },
        {
          "match": "\\bin\\b",
          "name": "keyword.operator.word.terraform"
        },
        {
          "match": "\\bif\\b",
          "name": "keyword.control.conditional.terraform"
        },
        {
          "match": "\\:",
          "name": "keyword.operator.terraform"
        },
        {
          "include": "#expressions"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#comma"
        },
        {
          "comment": "Local Identifiers",
          "match": "\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b",
          "name": "variable.other.readwrite.terraform"
        }
      ]
    },
    "object_key_values": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        }
      ]
    },
    "objects": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.braces.begin.terraform"
        }
      },
      "comment": "Map collection values",
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.braces.end.terraform"
        }
      },
      "name": "meta.braces.terraform",
      "patterns": [
        {
          "include": "#object_for_expression"
        },
        {
          "include": "#comments"
        },
        {
          "begin": "\\s*(\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b)\\s*(\\=)\\s*",
          "beginCaptures": {
            "1": {
              "name": "meta.mapping.key.terraform string.unquoted.terraform"
            },
            "2": {
              "name": "keyword.operator.terraform"
            }
          },
          "comment": "Literal, named object key",
          "end": "((\\,)|($\\n?)|(?=\\}))",
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.terraform"
            },
            "3": {
              "name": "punctuation.section.braces.end.terraform"
            }
          },
          "patterns": [
            {
              "include": "#object_key_values"
            }
          ]
        },
        {
          "begin": "((\\\").*(\\\"))\\s*(\\=)\\s*",
          "beginCaptures": {
            "1": {
              "name": "meta.mapping.key.terraform string.quoted.double.terraform"
            },
            "2": {
              "name": "punctuation.definition.string.begin.terraform"
            },
            "3": {
              "name": "punctuation.definition.string.end.terraform"
            },
            "4": {
              "name": "keyword.operator.terraform"
            }
          },
          "comment": "String object key",
          "end": "((\\,)|($\\n?)|(?=\\}))",
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.terraform"
            },
            "3": {
              "name": "punctuation.section.braces.end.terraform"
            }
          },
          "patterns": [
            {
              "include": "#object_key_values"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.terraform"
            }
          },
          "comment": "Begin computed object key",
          "end": "(\\))\\s*(\\=)\\s*",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parens.end.terraform"
            },
            "2": {
              "name": "keyword.operator.terraform"
            }
          },
          "name": "meta.mapping.key.terraform",
          "patterns": [
            {
              "include": "#expressions"
            }
          ]
        },
        {
          "comment": "Random Expression, for matching after computed keys",
          "patterns": [
            {
              "include": "#main"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "\\>\\=",
          "name": "keyword.operator.terraform"
        },
        {
          "match": "\\<\\=",
          "name": "keyword.operator.terraform"
        },
        {
          "match": "\\=\\=",
          "name": "keyword.operator.terraform"
        },
        {
          "match": "\\!\\=",
          "name": "keyword.operator.terraform"
        },
        {
          "match": "\\+",
          "name": "keyword.operator.arithmetic.terraform"
        },
        {
          "match": "\\-",
          "name": "keyword.operator.arithmetic.terraform"
        },
        {
          "match": "\\*",
          "name": "keyword.operator.arithmetic.terraform"
        },
        {
          "match": "\\/",
          "name": "keyword.operator.arithmetic.terraform"
        },
        {
          "match": "\\%",
          "name": "keyword.operator.arithmetic.terraform"
        },
        {
          "match": "\\&\\&",
          "name": "keyword.operator.logical.terraform"
        },
        {
          "match": "\\|\\|",
          "name": "keyword.operator.logical.terraform"
        },
        {
          "match": "\\!",
          "name": "keyword.operator.logical.terraform"
        },
        {
          "match": "\\>",
          "name": "keyword.operator.terraform"
        },
        {
          "match": "\\<",
          "name": "keyword.operator.terraform"
        },
        {
          "match": "\\?",
          "name": "keyword.operator.terraform"
        },
        {
          "match": "\\.\\.\\.",
          "name": "keyword.operator.terraform"
        },
        {
          "match": "\\:",
          "name": "keyword.operator.terraform"
        }
      ]
    },
    "parens": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.terraform"
        }
      },
      "comment": "Parens - matched *after* function syntax",
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.terraform"
        }
      },
      "patterns": [
        {
          "include": "#expressions"
        },
        {
          "comment": "Local Identifiers",
          "match": "\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b",
          "name": "variable.other.readwrite.terraform"
        }
      ]
    },
    "string_interpolation": {
      "begin": "(\\$|\\%)\\{",
      "beginCaptures": {
        "0": {
          "name": "keyword.other.interpolation.begin.terraform"
        }
      },
      "comment": "String interpolation",
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "keyword.other.interpolation.end.terraform"
        }
      },
      "name": "meta.interpolation.terraform",
      "patterns": [
        {
          "comment": "Trim left whitespace",
          "match": "\\~\\s",
          "name": "keyword.operator.template.left.trim.terraform"
        },
        {
          "comment": "Trim right whitespace",
          "match": "\\s\\~",
          "name": "keyword.operator.template.right.trim.terraform"
        },
        {
          "comment": "if/else/endif and for/in/endfor directives",
          "match": "\\b(if|else|endif|for|in|endfor)\\b",
          "name": "keyword.control.terraform"
        },
        {
          "include": "#expressions"
        }
      ]
    },
    "string_literals": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.terraform"
        }
      },
      "comment": "Strings",
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.terraform"
        }
      },
      "name": "string.quoted.double.terraform",
      "patterns": [
        {
          "include": "#string_interpolation"
        },
        {
          "comment": "Character Escapes",
          "match": "\\\\[nrt\"\\\\]|\\\\u(\\h{8}|\\h{4})",
          "name": "constant.character.escape.terraform"
        }
      ]
    },
    "top_level_attribute_definition": {
      "captures": {
        "1": {
          "name": "punctuation.section.parens.begin.terraform"
        },
        "2": {
          "name": "variable.other.readwrite.terraform"
        },
        "3": {
          "name": "punctuation.section.parens.end.terraform"
        },
        "4": {
          "name": "keyword.operator.assignment.terraform"
        }
      },
      "comment": "Attribute Definition - Identifier \"=\" Expression Newline",
      "match": "(\\()?(\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b)(\\))?\\s*(\\=[^\\=|\\>])\\s*",
      "name": "variable.declaration.terraform"
    },
    "tuple_for_expression": {
      "begin": "\\bfor\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.terraform"
        }
      },
      "comment": "Tuple for-expression",
      "end": "(?=\\])",
      "patterns": [
        {
          "match": "\\bin\\b",
          "name": "keyword.operator.word.terraform"
        },
        {
          "match": "\\bif\\b",
          "name": "keyword.control.conditional.terraform"
        },
        {
          "match": "\\:",
          "name": "keyword.operator.terraform"
        },
        {
          "include": "#expressions"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#comma"
        },
        {
          "comment": "Local Identifiers",
          "match": "\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b",
          "name": "variable.other.readwrite.terraform"
        }
      ]
    },
    "type_keywords": {
      "comment": "Type keywords known to Terraform.",
      "match": "\\b(any|string|number|bool)\\b",
      "name": "storage.type.terraform"
    }
  },
  "scopeName": "source.terraform",
  "uuid": "9060ca81-906d-4f19-a91a-159f4eb119d6"
}